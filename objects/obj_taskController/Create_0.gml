/// @description Insert description here
// You can write your code in this editor

employee_ids = ds_list_create();

/// @returns a ds_list of the ids of employees who have the profession restriction
function find_all_valid_employees(_professionRestriction) {
	
	// If there's no restrictions, return the raw set of ids
	if (_professionRestriction == E_TYPE.NONE) {
		var _returnDsList = ds_list_create()
		ds_list_copy(_returnDsList, employee_ids);
		return _returnDsList;
	}
	
	// Create a list to store all valid ids
	var _validEmployees = ds_list_create();
	
	// Loop through every employee we have
	for (var i = 0; i < ds_list_size(employee_ids); i++) {
		
		// Get the id
		var _employeeId = ds_list_find_value(employee_ids, i);
		
		// Get the employee profession
		var _profession = _employeeId.profession;
		
		if (_profession == _professionRestriction)
			ds_list_add(_validEmployees, _employeeId);
	}
	
	return _validEmployees;
}

// Returns the id of the employee with the least amount of tasks in their list
function find_least_tasks_employee(_employeeIdList) {
	
	// TODO: No employees edge case
	if (ds_list_size(_employeeIdList) > 0) {
	
		var _leastAmountOfTasks;
		var _leastAmountEmployeeId;
	
		var _numberOfTasks;
		var _employeeId;
	
		// Loop through for each employee
		for (var i = 0; i < ds_list_size(_employeeIdList); i++) {
			_employeeId = ds_list_find_value(_employeeIdList, i);
		
			// Ensure that the employee still exists
			if (is_valid_target(_employeeId)) {
				_numberOfTasks = ds_list_size(_employeeId.command_queue);
			
				// Update the employee with least amount of tasks
				// if they have the least amount of tasks
				if (i == 0) or (_numberOfTasks < _leastAmountOfTasks){
					_leastAmountOfTasks = _numberOfTasks;
					_leastAmountEmployeeId = _employeeId;
				}
			}
		}
	
		show_debug_message("Employee: " + string(_leastAmountEmployeeId) 
							+ " has the least amount of tasks at: " 
							+ string(_leastAmountOfTasks) + "tasks");
		
		return _leastAmountEmployeeId;
		
	} else {
		show_debug_message("No available employees");
		return false;
	}
}

function request_task(_command, _target, _priority, _professionRestriction) {
	
	// Get only the ids of workers who could do the job
	var _validEmployeeIds = find_all_valid_employees(_professionRestriction);
	
	var _employeeIdToGiveTaskTo = find_least_tasks_employee(_validEmployeeIds);
	
	// Destroy the ds_list generated by the find_all_valid_employees function
	ds_list_destroy(_validEmployeeIds);
	
	// Only request a command if there is a valid employee
	if (_employeeIdToGiveTaskTo != false) {
		with(_employeeIdToGiveTaskTo) {
			queue_command(_command, _target, _priority);
		}
	}
	
	// TODO: Store commands that don't currently have a target
}